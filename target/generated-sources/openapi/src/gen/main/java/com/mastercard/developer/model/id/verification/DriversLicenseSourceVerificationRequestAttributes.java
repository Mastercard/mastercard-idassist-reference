/*
 * Mastercard Id Verification API
 * ID Verification provides the technology platform and operational service to perform real-time user identity verification for various use cases including financial services, healthcare, travel and education. The solution is offered via APIs to prove the identity of users based on their verified phone number and social security number.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.model.id.verification;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

/**
 * DriversLicenseSourceVerificationRequestAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-08T13:32:52.448-06:00[America/Chicago]")
public class DriversLicenseSourceVerificationRequestAttributes {
  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  /**
   * Consent from User
   */
  @JsonAdapter(UserConsentEnum.Adapter.class)
  public enum UserConsentEnum {
    ACCEPT("ACCEPT"),
    
    DECLINE("DECLINE"),
    
    REVOKE("REVOKE"),
    
    EXPIRE("EXPIRE");

    private String value;

    UserConsentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserConsentEnum fromValue(String value) {
      for (UserConsentEnum b : UserConsentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserConsentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserConsentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserConsentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserConsentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USER_CONSENT = "userConsent";
  @SerializedName(SERIALIZED_NAME_USER_CONSENT)
  private UserConsentEnum userConsent;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;


  public DriversLicenseSourceVerificationRequestAttributes documentNumber(String documentNumber) {
    
    this.documentNumber = documentNumber;
    return this;
  }

   /**
   * Document Number
   * @return documentNumber
  **/
  @ApiModelProperty(example = "1LViI488YkFZh8YjNlLf61BMn29cmQn", required = true, value = "Document Number")

  public String getDocumentNumber() {
    return documentNumber;
  }


  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public DriversLicenseSourceVerificationRequestAttributes userConsent(UserConsentEnum userConsent) {
    
    this.userConsent = userConsent;
    return this;
  }

   /**
   * Consent from User
   * @return userConsent
  **/
  @ApiModelProperty(example = "ACCEPT", required = true, value = "Consent from User")

  public UserConsentEnum getUserConsent() {
    return userConsent;
  }


  public void setUserConsent(UserConsentEnum userConsent) {
    this.userConsent = userConsent;
  }


  public DriversLicenseSourceVerificationRequestAttributes dateOfBirth(LocalDate dateOfBirth) {
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * YYYY-MM-DD format
   * @return dateOfBirth
  **/
  @ApiModelProperty(example = "Sun Dec 31 18:00:00 CST 1989", required = true, value = "YYYY-MM-DD format")

  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public DriversLicenseSourceVerificationRequestAttributes firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Users First Name
   * @return firstName
  **/
  @ApiModelProperty(example = "John", required = true, value = "Users First Name")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public DriversLicenseSourceVerificationRequestAttributes lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Users Last Name
   * @return lastName
  **/
  @ApiModelProperty(example = "Smith", required = true, value = "Users Last Name")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public DriversLicenseSourceVerificationRequestAttributes stateCode(String stateCode) {
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * State code
   * @return stateCode
  **/
  @ApiModelProperty(example = "NSW", required = true, value = "State code")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriversLicenseSourceVerificationRequestAttributes driversLicenseSourceVerificationRequestAttributes = (DriversLicenseSourceVerificationRequestAttributes) o;
    return Objects.equals(this.documentNumber, driversLicenseSourceVerificationRequestAttributes.documentNumber) &&
        Objects.equals(this.userConsent, driversLicenseSourceVerificationRequestAttributes.userConsent) &&
        Objects.equals(this.dateOfBirth, driversLicenseSourceVerificationRequestAttributes.dateOfBirth) &&
        Objects.equals(this.firstName, driversLicenseSourceVerificationRequestAttributes.firstName) &&
        Objects.equals(this.lastName, driversLicenseSourceVerificationRequestAttributes.lastName) &&
        Objects.equals(this.stateCode, driversLicenseSourceVerificationRequestAttributes.stateCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentNumber, userConsent, dateOfBirth, firstName, lastName, stateCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriversLicenseSourceVerificationRequestAttributes {\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    userConsent: ").append(toIndentedString(userConsent)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Mastercard Id Verification API
 * ID Verification provides the technology platform and operational service to perform real-time user identity verification for various use cases including financial services, healthcare, travel and education. The solution is offered via APIs to prove the identity of users based on their verified phone number and social security number.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.model.id.verification;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SMSOtp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-08T13:32:52.448-06:00[America/Chicago]")
public class SMSOtp {
  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale = "en-US";

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  /**
   * Consent from User
   */
  @JsonAdapter(UserConsentEnum.Adapter.class)
  public enum UserConsentEnum {
    ACCEPT("ACCEPT"),
    
    DECLINE("DECLINE"),
    
    REVOKE("REVOKE"),
    
    EXPIRE("EXPIRE");

    private String value;

    UserConsentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserConsentEnum fromValue(String value) {
      for (UserConsentEnum b : UserConsentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserConsentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserConsentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserConsentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserConsentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USER_CONSENT = "userConsent";
  @SerializedName(SERIALIZED_NAME_USER_CONSENT)
  private UserConsentEnum userConsent;

  public static final String SERIALIZED_NAME_OPTED_IN_CONSENT_STATUS = "optedInConsentStatus";
  @SerializedName(SERIALIZED_NAME_OPTED_IN_CONSENT_STATUS)
  private Boolean optedInConsentStatus;


  public SMSOtp phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * The phone number in which to send the OTP to. It should be prefixed with the international dialing code, without the &#39;+&#39;.
   * @return phoneNumber
  **/
  @ApiModelProperty(example = "553453554563", required = true, value = "The phone number in which to send the OTP to. It should be prefixed with the international dialing code, without the '+'.")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public SMSOtp locale(String locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * IETF BCP 47 Format E.g. \&quot;en-GB\&quot; (English - United Kingdom), \&quot;es-MX\&quot; (Spanish - Mexico). More information: Locale ID (LCID) as defined by Microsoft. Not required. The default value is \&quot;en-US\&quot;.
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en-GB", value = "IETF BCP 47 Format E.g. \"en-GB\" (English - United Kingdom), \"es-MX\" (Spanish - Mexico). More information: Locale ID (LCID) as defined by Microsoft. Not required. The default value is \"en-US\".")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    this.locale = locale;
  }


  public SMSOtp countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Size must be exactly 2 letters. This attribute is passed for all of the exposed APIs.
   * @return countryCode
  **/
  @ApiModelProperty(example = "BR", required = true, value = "Size must be exactly 2 letters. This attribute is passed for all of the exposed APIs.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public SMSOtp userConsent(UserConsentEnum userConsent) {
    
    this.userConsent = userConsent;
    return this;
  }

   /**
   * Consent from User
   * @return userConsent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACCEPT", value = "Consent from User")

  public UserConsentEnum getUserConsent() {
    return userConsent;
  }


  public void setUserConsent(UserConsentEnum userConsent) {
    this.userConsent = userConsent;
  }


  public SMSOtp optedInConsentStatus(Boolean optedInConsentStatus) {
    
    this.optedInConsentStatus = optedInConsentStatus;
    return this;
  }

   /**
   * Should be true to proceed with the request. This attribute is passed for all of the exposed APIs.
   * @return optedInConsentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Should be true to proceed with the request. This attribute is passed for all of the exposed APIs.")

  public Boolean getOptedInConsentStatus() {
    return optedInConsentStatus;
  }


  public void setOptedInConsentStatus(Boolean optedInConsentStatus) {
    this.optedInConsentStatus = optedInConsentStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMSOtp smSOtp = (SMSOtp) o;
    return Objects.equals(this.phoneNumber, smSOtp.phoneNumber) &&
        Objects.equals(this.locale, smSOtp.locale) &&
        Objects.equals(this.countryCode, smSOtp.countryCode) &&
        Objects.equals(this.userConsent, smSOtp.userConsent) &&
        Objects.equals(this.optedInConsentStatus, smSOtp.optedInConsentStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumber, locale, countryCode, userConsent, optedInConsentStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMSOtp {\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    userConsent: ").append(toIndentedString(userConsent)).append("\n");
    sb.append("    optedInConsentStatus: ").append(toIndentedString(optedInConsentStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


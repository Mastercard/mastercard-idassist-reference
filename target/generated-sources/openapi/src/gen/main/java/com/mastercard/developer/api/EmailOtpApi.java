/*
 * Mastercard Id Verification API
 * ID Verification provides the technology platform and operational service to perform real-time user identity verification for various use cases including financial services, healthcare, travel and education. The solution is offered via APIs to prove the identity of users based on their verified phone number and social security number.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.api;

import com.mastercard.developer.ApiCallback;
import com.mastercard.developer.ApiClient;
import com.mastercard.developer.ApiException;
import com.mastercard.developer.ApiResponse;
import com.mastercard.developer.Configuration;
import com.mastercard.developer.Pair;
import com.mastercard.developer.ProgressRequestBody;
import com.mastercard.developer.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.model.id.verification.ApiError;
import com.mastercard.developer.model.id.verification.EmailOtp;
import com.mastercard.developer.model.id.verification.Otp;
import com.mastercard.developer.model.id.verification.OtpVerification;
import com.mastercard.developer.model.id.verification.OtpVerificationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailOtpApi {
    private ApiClient localVarApiClient;

    public EmailOtpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailOtpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sendEmailOtp
     * @param emailOtp  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailOtpCall(EmailOtp emailOtp, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = emailOtp;

        // create path and map variables
        String localVarPath = "/email-otps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailOtpValidateBeforeCall(EmailOtp emailOtp, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'emailOtp' is set
        if (emailOtp == null) {
            throw new ApiException("Missing the required parameter 'emailOtp' when calling sendEmailOtp(Async)");
        }
        

        okhttp3.Call localVarCall = sendEmailOtpCall(emailOtp, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * Creates and Send a One-Time Passcode (OTP) via Email
     * Create and Send a One-Time Passcode (OTP) via Email to the address provided.
     * @param emailOtp  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return Otp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public Otp sendEmailOtp(EmailOtp emailOtp, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<Otp> localVarResp = sendEmailOtpWithHttpInfo(emailOtp, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * Creates and Send a One-Time Passcode (OTP) via Email
     * Create and Send a One-Time Passcode (OTP) via Email to the address provided.
     * @param emailOtp  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;Otp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Otp> sendEmailOtpWithHttpInfo(EmailOtp emailOtp, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = sendEmailOtpValidateBeforeCall(emailOtp, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<Otp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates and Send a One-Time Passcode (OTP) via Email (asynchronously)
     * Create and Send a One-Time Passcode (OTP) via Email to the address provided.
     * @param emailOtp  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailOtpAsync(EmailOtp emailOtp, Boolean xEncryptedPayload, final ApiCallback<Otp> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailOtpValidateBeforeCall(emailOtp, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<Otp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEmailOtp
     * @param otpVerification  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEmailOtpCall(OtpVerification otpVerification, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = otpVerification;

        // create path and map variables
        String localVarPath = "/email-otp-verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEmailOtpValidateBeforeCall(OtpVerification otpVerification, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'otpVerification' is set
        if (otpVerification == null) {
            throw new ApiException("Missing the required parameter 'otpVerification' when calling verifyEmailOtp(Async)");
        }
        

        okhttp3.Call localVarCall = verifyEmailOtpCall(otpVerification, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * Verifies the provided code matches the Email OTP
     * Verify that the provided code matches One-Time Passcode (OTP) sent via Email during &#x60;/email-otps&#x60;
     * @param otpVerification  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return OtpVerificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public OtpVerificationResult verifyEmailOtp(OtpVerification otpVerification, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<OtpVerificationResult> localVarResp = verifyEmailOtpWithHttpInfo(otpVerification, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * Verifies the provided code matches the Email OTP
     * Verify that the provided code matches One-Time Passcode (OTP) sent via Email during &#x60;/email-otps&#x60;
     * @param otpVerification  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;OtpVerificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OtpVerificationResult> verifyEmailOtpWithHttpInfo(OtpVerification otpVerification, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = verifyEmailOtpValidateBeforeCall(otpVerification, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<OtpVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies the provided code matches the Email OTP (asynchronously)
     * Verify that the provided code matches One-Time Passcode (OTP) sent via Email during &#x60;/email-otps&#x60;
     * @param otpVerification  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEmailOtpAsync(OtpVerification otpVerification, Boolean xEncryptedPayload, final ApiCallback<OtpVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEmailOtpValidateBeforeCall(otpVerification, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<OtpVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * Mastercard Id Assist API
 * ID Assist provides the technology platform and operational service to allow the secure storage and transmission of Digital Identity data from the user to the Relying Party. The data is verified to a required level of assurance by an Identity Verification Provider.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.api;

import com.mastercard.developer.ApiCallback;
import com.mastercard.developer.ApiClient;
import com.mastercard.developer.ApiException;
import com.mastercard.developer.ApiResponse;
import com.mastercard.developer.Configuration;
import com.mastercard.developer.Pair;
import com.mastercard.developer.ProgressRequestBody;
import com.mastercard.developer.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.model.Error;
import com.mastercard.developer.model.SMSOTP;
import com.mastercard.developer.model.SMSOTPGeneration;
import com.mastercard.developer.model.SMSOTPVerification;
import com.mastercard.developer.model.SMSOTPVerificationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OtpApi {
    private ApiClient localVarApiClient;

    public OtpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OtpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createOtpsSMS
     * @param smSOTPGeneration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOtpsSMSCall(SMSOTPGeneration smSOTPGeneration, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = smSOTPGeneration;

        // create path and map variables
        String localVarPath = "/sms-otps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOtpsSMSValidateBeforeCall(SMSOTPGeneration smSOTPGeneration, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'smSOTPGeneration' is set
        if (smSOTPGeneration == null) {
            throw new ApiException("Missing the required parameter 'smSOTPGeneration' when calling createOtpsSMS(Async)");
        }
        

        okhttp3.Call localVarCall = createOtpsSMSCall(smSOTPGeneration, _callback);
        return localVarCall;

    }

    /**
     * Generate an SMS OTP
     * Create and Send a One-Time Passcode (OTP) via SMS to the phone number provided.
     * @param smSOTPGeneration  (required)
     * @return SMSOTP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public SMSOTP createOtpsSMS(SMSOTPGeneration smSOTPGeneration) throws ApiException {
        ApiResponse<SMSOTP> localVarResp = createOtpsSMSWithHttpInfo(smSOTPGeneration);
        return localVarResp.getData();
    }

    /**
     * Generate an SMS OTP
     * Create and Send a One-Time Passcode (OTP) via SMS to the phone number provided.
     * @param smSOTPGeneration  (required)
     * @return ApiResponse&lt;SMSOTP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SMSOTP> createOtpsSMSWithHttpInfo(SMSOTPGeneration smSOTPGeneration) throws ApiException {
        okhttp3.Call localVarCall = createOtpsSMSValidateBeforeCall(smSOTPGeneration, null);
        Type localVarReturnType = new TypeToken<SMSOTP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an SMS OTP (asynchronously)
     * Create and Send a One-Time Passcode (OTP) via SMS to the phone number provided.
     * @param smSOTPGeneration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOtpsSMSAsync(SMSOTPGeneration smSOTPGeneration, final ApiCallback<SMSOTP> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOtpsSMSValidateBeforeCall(smSOTPGeneration, _callback);
        Type localVarReturnType = new TypeToken<SMSOTP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyOtps
     * @param smSOTPVerification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyOtpsCall(SMSOTPVerification smSOTPVerification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = smSOTPVerification;

        // create path and map variables
        String localVarPath = "/sms-otp-verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyOtpsValidateBeforeCall(SMSOTPVerification smSOTPVerification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'smSOTPVerification' is set
        if (smSOTPVerification == null) {
            throw new ApiException("Missing the required parameter 'smSOTPVerification' when calling verifyOtps(Async)");
        }
        

        okhttp3.Call localVarCall = verifyOtpsCall(smSOTPVerification, _callback);
        return localVarCall;

    }

    /**
     * Verify an SMS OTP
     * Verify that the provided code matches One-Time Passcode (OTP) sent via SMS during &#x60;/sms-otps&#x60;
     * @param smSOTPVerification  (required)
     * @return SMSOTPVerificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public SMSOTPVerificationResult verifyOtps(SMSOTPVerification smSOTPVerification) throws ApiException {
        ApiResponse<SMSOTPVerificationResult> localVarResp = verifyOtpsWithHttpInfo(smSOTPVerification);
        return localVarResp.getData();
    }

    /**
     * Verify an SMS OTP
     * Verify that the provided code matches One-Time Passcode (OTP) sent via SMS during &#x60;/sms-otps&#x60;
     * @param smSOTPVerification  (required)
     * @return ApiResponse&lt;SMSOTPVerificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SMSOTPVerificationResult> verifyOtpsWithHttpInfo(SMSOTPVerification smSOTPVerification) throws ApiException {
        okhttp3.Call localVarCall = verifyOtpsValidateBeforeCall(smSOTPVerification, null);
        Type localVarReturnType = new TypeToken<SMSOTPVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify an SMS OTP (asynchronously)
     * Verify that the provided code matches One-Time Passcode (OTP) sent via SMS during &#x60;/sms-otps&#x60;
     * @param smSOTPVerification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyOtpsAsync(SMSOTPVerification smSOTPVerification, final ApiCallback<SMSOTPVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyOtpsValidateBeforeCall(smSOTPVerification, _callback);
        Type localVarReturnType = new TypeToken<SMSOTPVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

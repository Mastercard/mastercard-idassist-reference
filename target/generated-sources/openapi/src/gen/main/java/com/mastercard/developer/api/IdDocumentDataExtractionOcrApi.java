/*
 * Mastercard Id Verification API
 * ID Verification provides the technology platform and operational service to perform real-time user identity verification for various use cases including financial services, healthcare, travel and education. The solution is offered via APIs to prove the identity of users based on their verified phone number and social security number.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.api;

import com.mastercard.developer.ApiCallback;
import com.mastercard.developer.ApiClient;
import com.mastercard.developer.ApiException;
import com.mastercard.developer.ApiResponse;
import com.mastercard.developer.Configuration;
import com.mastercard.developer.Pair;
import com.mastercard.developer.ProgressRequestBody;
import com.mastercard.developer.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.model.id.verification.AccessToken;
import com.mastercard.developer.model.id.verification.ApiError;
import com.mastercard.developer.model.id.verification.DocumentVerificationExtractedData;
import com.mastercard.developer.model.id.verification.RetrieveAccessToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdDocumentDataExtractionOcrApi {
    private ApiClient localVarApiClient;

    public IdDocumentDataExtractionOcrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdDocumentDataExtractionOcrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for extractScannedDocumentData
     * @param scanId UUID representing the scanned document verification process (required)
     * @param userConsent Consent from User (required)
     * @param retrieveSelfie Flag indicating if the selfie needs to be retrieved. (required)
     * @param retrieveDocumentImages Flag indicating if the document images needs to be retrieved. (required)
     * @param retrieveFacemap Flag indicating if the facemap needs to be retrieved. (required)
     * @param documentType document Type (required)
     * @param userSelectedCountry country where the the document provided (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractScannedDocumentDataCall(String scanId, String userConsent, String retrieveSelfie, String retrieveDocumentImages, String retrieveFacemap, String documentType, String userSelectedCountry, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-extractions/scans/{scan_id}"
            .replaceAll("\\{" + "scan_id" + "\\}", localVarApiClient.escapeString(scanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userConsent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_consent", userConsent));
        }

        if (retrieveSelfie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrieve_selfie", retrieveSelfie));
        }

        if (retrieveDocumentImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrieve_document_images", retrieveDocumentImages));
        }

        if (retrieveFacemap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrieve_facemap", retrieveFacemap));
        }

        if (documentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_type", documentType));
        }

        if (userSelectedCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_selected_country", userSelectedCountry));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractScannedDocumentDataValidateBeforeCall(String scanId, String userConsent, String retrieveSelfie, String retrieveDocumentImages, String retrieveFacemap, String documentType, String userSelectedCountry, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling extractScannedDocumentData(Async)");
        }
        
        // verify the required parameter 'userConsent' is set
        if (userConsent == null) {
            throw new ApiException("Missing the required parameter 'userConsent' when calling extractScannedDocumentData(Async)");
        }
        
        // verify the required parameter 'retrieveSelfie' is set
        if (retrieveSelfie == null) {
            throw new ApiException("Missing the required parameter 'retrieveSelfie' when calling extractScannedDocumentData(Async)");
        }
        
        // verify the required parameter 'retrieveDocumentImages' is set
        if (retrieveDocumentImages == null) {
            throw new ApiException("Missing the required parameter 'retrieveDocumentImages' when calling extractScannedDocumentData(Async)");
        }
        
        // verify the required parameter 'retrieveFacemap' is set
        if (retrieveFacemap == null) {
            throw new ApiException("Missing the required parameter 'retrieveFacemap' when calling extractScannedDocumentData(Async)");
        }
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling extractScannedDocumentData(Async)");
        }
        
        // verify the required parameter 'userSelectedCountry' is set
        if (userSelectedCountry == null) {
            throw new ApiException("Missing the required parameter 'userSelectedCountry' when calling extractScannedDocumentData(Async)");
        }
        

        okhttp3.Call localVarCall = extractScannedDocumentDataCall(scanId, userConsent, retrieveSelfie, retrieveDocumentImages, retrieveFacemap, documentType, userSelectedCountry, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * Returns the status of the document verification.
     * Returns the status of the document verification as it&#39;s being processed by the vendor.
     * @param scanId UUID representing the scanned document verification process (required)
     * @param userConsent Consent from User (required)
     * @param retrieveSelfie Flag indicating if the selfie needs to be retrieved. (required)
     * @param retrieveDocumentImages Flag indicating if the document images needs to be retrieved. (required)
     * @param retrieveFacemap Flag indicating if the facemap needs to be retrieved. (required)
     * @param documentType document Type (required)
     * @param userSelectedCountry country where the the document provided (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return DocumentVerificationExtractedData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentVerificationExtractedData extractScannedDocumentData(String scanId, String userConsent, String retrieveSelfie, String retrieveDocumentImages, String retrieveFacemap, String documentType, String userSelectedCountry, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<DocumentVerificationExtractedData> localVarResp = extractScannedDocumentDataWithHttpInfo(scanId, userConsent, retrieveSelfie, retrieveDocumentImages, retrieveFacemap, documentType, userSelectedCountry, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * Returns the status of the document verification.
     * Returns the status of the document verification as it&#39;s being processed by the vendor.
     * @param scanId UUID representing the scanned document verification process (required)
     * @param userConsent Consent from User (required)
     * @param retrieveSelfie Flag indicating if the selfie needs to be retrieved. (required)
     * @param retrieveDocumentImages Flag indicating if the document images needs to be retrieved. (required)
     * @param retrieveFacemap Flag indicating if the facemap needs to be retrieved. (required)
     * @param documentType document Type (required)
     * @param userSelectedCountry country where the the document provided (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;DocumentVerificationExtractedData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentVerificationExtractedData> extractScannedDocumentDataWithHttpInfo(String scanId, String userConsent, String retrieveSelfie, String retrieveDocumentImages, String retrieveFacemap, String documentType, String userSelectedCountry, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = extractScannedDocumentDataValidateBeforeCall(scanId, userConsent, retrieveSelfie, retrieveDocumentImages, retrieveFacemap, documentType, userSelectedCountry, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<DocumentVerificationExtractedData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the status of the document verification. (asynchronously)
     * Returns the status of the document verification as it&#39;s being processed by the vendor.
     * @param scanId UUID representing the scanned document verification process (required)
     * @param userConsent Consent from User (required)
     * @param retrieveSelfie Flag indicating if the selfie needs to be retrieved. (required)
     * @param retrieveDocumentImages Flag indicating if the document images needs to be retrieved. (required)
     * @param retrieveFacemap Flag indicating if the facemap needs to be retrieved. (required)
     * @param documentType document Type (required)
     * @param userSelectedCountry country where the the document provided (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractScannedDocumentDataAsync(String scanId, String userConsent, String retrieveSelfie, String retrieveDocumentImages, String retrieveFacemap, String documentType, String userSelectedCountry, Boolean xEncryptedPayload, final ApiCallback<DocumentVerificationExtractedData> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractScannedDocumentDataValidateBeforeCall(scanId, userConsent, retrieveSelfie, retrieveDocumentImages, retrieveFacemap, documentType, userSelectedCountry, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<DocumentVerificationExtractedData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveDataExtractionAccessToken
     * @param retrieveAccessToken  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDataExtractionAccessTokenCall(RetrieveAccessToken retrieveAccessToken, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = retrieveAccessToken;

        // create path and map variables
        String localVarPath = "/data-extractions/access-tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveDataExtractionAccessTokenValidateBeforeCall(RetrieveAccessToken retrieveAccessToken, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'retrieveAccessToken' is set
        if (retrieveAccessToken == null) {
            throw new ApiException("Missing the required parameter 'retrieveAccessToken' when calling retrieveDataExtractionAccessToken(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveDataExtractionAccessTokenCall(retrieveAccessToken, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * The provider token is retrieved by country code and SDK version
     * Return a provider token to be passed to the MIDS Liveness SDK module
     * @param retrieveAccessToken  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
     </table>
     */
    public AccessToken retrieveDataExtractionAccessToken(RetrieveAccessToken retrieveAccessToken, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<AccessToken> localVarResp = retrieveDataExtractionAccessTokenWithHttpInfo(retrieveAccessToken, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * The provider token is retrieved by country code and SDK version
     * Return a provider token to be passed to the MIDS Liveness SDK module
     * @param retrieveAccessToken  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessToken> retrieveDataExtractionAccessTokenWithHttpInfo(RetrieveAccessToken retrieveAccessToken, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = retrieveDataExtractionAccessTokenValidateBeforeCall(retrieveAccessToken, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The provider token is retrieved by country code and SDK version (asynchronously)
     * Return a provider token to be passed to the MIDS Liveness SDK module
     * @param retrieveAccessToken  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDataExtractionAccessTokenAsync(RetrieveAccessToken retrieveAccessToken, Boolean xEncryptedPayload, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveDataExtractionAccessTokenValidateBeforeCall(retrieveAccessToken, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * Mastercard Id Verification API
 * ID Verification provides the technology platform and operational service to perform real-time user identity verification for various use cases including financial services, healthcare, travel and education. The solution is offered via APIs to prove the identity of users based on their verified phone number and social security number.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.model.id.verification;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

/**
 * MedicareCardSourceVerificationRequestAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-08T13:32:52.448-06:00[America/Chicago]")
public class MedicareCardSourceVerificationRequestAttributes {
  /**
   * Consent from User
   */
  @JsonAdapter(UserConsentEnum.Adapter.class)
  public enum UserConsentEnum {
    ACCEPT("ACCEPT"),
    
    DECLINE("DECLINE"),
    
    REVOKE("REVOKE"),
    
    EXPIRE("EXPIRE");

    private String value;

    UserConsentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserConsentEnum fromValue(String value) {
      for (UserConsentEnum b : UserConsentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserConsentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserConsentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserConsentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserConsentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USER_CONSENT = "userConsent";
  @SerializedName(SERIALIZED_NAME_USER_CONSENT)
  private UserConsentEnum userConsent;

  /**
   * Medicard Color can be GREEN, BLUE OR YELLOW
   */
  @JsonAdapter(CardColorEnum.Adapter.class)
  public enum CardColorEnum {
    GREEN("GREEN"),
    
    BLUE("BLUE"),
    
    YELLOW("YELLOW");

    private String value;

    CardColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardColorEnum fromValue(String value) {
      for (CardColorEnum b : CardColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardColorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CARD_COLOR = "cardColor";
  @SerializedName(SERIALIZED_NAME_CARD_COLOR)
  private CardColorEnum cardColor;

  public static final String SERIALIZED_NAME_NAME_LINE1 = "nameLine1";
  @SerializedName(SERIALIZED_NAME_NAME_LINE1)
  private String nameLine1;

  public static final String SERIALIZED_NAME_NAME_LINE2 = "nameLine2";
  @SerializedName(SERIALIZED_NAME_NAME_LINE2)
  private String nameLine2;

  public static final String SERIALIZED_NAME_NAME_LINE3 = "nameLine3";
  @SerializedName(SERIALIZED_NAME_NAME_LINE3)
  private String nameLine3;

  public static final String SERIALIZED_NAME_NAME_LINE4 = "nameLine4";
  @SerializedName(SERIALIZED_NAME_NAME_LINE4)
  private String nameLine4;

  public static final String SERIALIZED_NAME_MEDICARE_CARD_NO = "medicareCardNo";
  @SerializedName(SERIALIZED_NAME_MEDICARE_CARD_NO)
  private String medicareCardNo;

  public static final String SERIALIZED_NAME_INDIVIDUAL_REFERENCE_NO = "individualReferenceNo";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_REFERENCE_NO)
  private String individualReferenceNo;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private LocalDate birthDate;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;


  public MedicareCardSourceVerificationRequestAttributes userConsent(UserConsentEnum userConsent) {
    
    this.userConsent = userConsent;
    return this;
  }

   /**
   * Consent from User
   * @return userConsent
  **/
  @ApiModelProperty(example = "ACCEPT", required = true, value = "Consent from User")

  public UserConsentEnum getUserConsent() {
    return userConsent;
  }


  public void setUserConsent(UserConsentEnum userConsent) {
    this.userConsent = userConsent;
  }


  public MedicareCardSourceVerificationRequestAttributes cardColor(CardColorEnum cardColor) {
    
    this.cardColor = cardColor;
    return this;
  }

   /**
   * Medicard Color can be GREEN, BLUE OR YELLOW
   * @return cardColor
  **/
  @ApiModelProperty(example = "BLUE", required = true, value = "Medicard Color can be GREEN, BLUE OR YELLOW")

  public CardColorEnum getCardColor() {
    return cardColor;
  }


  public void setCardColor(CardColorEnum cardColor) {
    this.cardColor = cardColor;
  }


  public MedicareCardSourceVerificationRequestAttributes nameLine1(String nameLine1) {
    
    this.nameLine1 = nameLine1;
    return this;
  }

   /**
   * Name Line 1
   * @return nameLine1
  **/
  @ApiModelProperty(example = "Smith", required = true, value = "Name Line 1")

  public String getNameLine1() {
    return nameLine1;
  }


  public void setNameLine1(String nameLine1) {
    this.nameLine1 = nameLine1;
  }


  public MedicareCardSourceVerificationRequestAttributes nameLine2(String nameLine2) {
    
    this.nameLine2 = nameLine2;
    return this;
  }

   /**
   * Name Line 2
   * @return nameLine2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Steve", value = "Name Line 2")

  public String getNameLine2() {
    return nameLine2;
  }


  public void setNameLine2(String nameLine2) {
    this.nameLine2 = nameLine2;
  }


  public MedicareCardSourceVerificationRequestAttributes nameLine3(String nameLine3) {
    
    this.nameLine3 = nameLine3;
    return this;
  }

   /**
   * Name Line 3
   * @return nameLine3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Baven", value = "Name Line 3")

  public String getNameLine3() {
    return nameLine3;
  }


  public void setNameLine3(String nameLine3) {
    this.nameLine3 = nameLine3;
  }


  public MedicareCardSourceVerificationRequestAttributes nameLine4(String nameLine4) {
    
    this.nameLine4 = nameLine4;
    return this;
  }

   /**
   * Name Line 4
   * @return nameLine4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mike", value = "Name Line 4")

  public String getNameLine4() {
    return nameLine4;
  }


  public void setNameLine4(String nameLine4) {
    this.nameLine4 = nameLine4;
  }


  public MedicareCardSourceVerificationRequestAttributes medicareCardNo(String medicareCardNo) {
    
    this.medicareCardNo = medicareCardNo;
    return this;
  }

   /**
   * Unique number for Medicare card
   * @return medicareCardNo
  **/
  @ApiModelProperty(example = "1234567890", required = true, value = "Unique number for Medicare card")

  public String getMedicareCardNo() {
    return medicareCardNo;
  }


  public void setMedicareCardNo(String medicareCardNo) {
    this.medicareCardNo = medicareCardNo;
  }


  public MedicareCardSourceVerificationRequestAttributes individualReferenceNo(String individualReferenceNo) {
    
    this.individualReferenceNo = individualReferenceNo;
    return this;
  }

   /**
   * Individual Reference Number
   * @return individualReferenceNo
  **/
  @ApiModelProperty(example = "1", required = true, value = "Individual Reference Number")

  public String getIndividualReferenceNo() {
    return individualReferenceNo;
  }


  public void setIndividualReferenceNo(String individualReferenceNo) {
    this.individualReferenceNo = individualReferenceNo;
  }


  public MedicareCardSourceVerificationRequestAttributes countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country code (case insensitive) as described in the ISO 3166 alpha-2 international standard
   * @return countryCode
  **/
  @ApiModelProperty(example = "AUS", required = true, value = "Country code (case insensitive) as described in the ISO 3166 alpha-2 international standard")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public MedicareCardSourceVerificationRequestAttributes birthDate(LocalDate birthDate) {
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * YYYY-MM-DD format
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sun Oct 24 19:00:00 CDT 2010", value = "YYYY-MM-DD format")

  public LocalDate getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
  }


  public MedicareCardSourceVerificationRequestAttributes expiryDate(String expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * The expiry date as it appears on the card, usually in DD/MM/YYYY for Green Medicare Cards and MM/YYYY for Blue and Yellow Medicare Cards. API accepts YYYY-MM format for Green Medicare Cards and YYYY-MM-DD for Blue and Yellow Medicare Cards.
   * @return expiryDate
  **/
  @ApiModelProperty(example = "2000-01 OR 2000-12-31", required = true, value = "The expiry date as it appears on the card, usually in DD/MM/YYYY for Green Medicare Cards and MM/YYYY for Blue and Yellow Medicare Cards. API accepts YYYY-MM format for Green Medicare Cards and YYYY-MM-DD for Blue and Yellow Medicare Cards.")

  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MedicareCardSourceVerificationRequestAttributes medicareCardSourceVerificationRequestAttributes = (MedicareCardSourceVerificationRequestAttributes) o;
    return Objects.equals(this.userConsent, medicareCardSourceVerificationRequestAttributes.userConsent) &&
        Objects.equals(this.cardColor, medicareCardSourceVerificationRequestAttributes.cardColor) &&
        Objects.equals(this.nameLine1, medicareCardSourceVerificationRequestAttributes.nameLine1) &&
        Objects.equals(this.nameLine2, medicareCardSourceVerificationRequestAttributes.nameLine2) &&
        Objects.equals(this.nameLine3, medicareCardSourceVerificationRequestAttributes.nameLine3) &&
        Objects.equals(this.nameLine4, medicareCardSourceVerificationRequestAttributes.nameLine4) &&
        Objects.equals(this.medicareCardNo, medicareCardSourceVerificationRequestAttributes.medicareCardNo) &&
        Objects.equals(this.individualReferenceNo, medicareCardSourceVerificationRequestAttributes.individualReferenceNo) &&
        Objects.equals(this.countryCode, medicareCardSourceVerificationRequestAttributes.countryCode) &&
        Objects.equals(this.birthDate, medicareCardSourceVerificationRequestAttributes.birthDate) &&
        Objects.equals(this.expiryDate, medicareCardSourceVerificationRequestAttributes.expiryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userConsent, cardColor, nameLine1, nameLine2, nameLine3, nameLine4, medicareCardNo, individualReferenceNo, countryCode, birthDate, expiryDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MedicareCardSourceVerificationRequestAttributes {\n");
    sb.append("    userConsent: ").append(toIndentedString(userConsent)).append("\n");
    sb.append("    cardColor: ").append(toIndentedString(cardColor)).append("\n");
    sb.append("    nameLine1: ").append(toIndentedString(nameLine1)).append("\n");
    sb.append("    nameLine2: ").append(toIndentedString(nameLine2)).append("\n");
    sb.append("    nameLine3: ").append(toIndentedString(nameLine3)).append("\n");
    sb.append("    nameLine4: ").append(toIndentedString(nameLine4)).append("\n");
    sb.append("    medicareCardNo: ").append(toIndentedString(medicareCardNo)).append("\n");
    sb.append("    individualReferenceNo: ").append(toIndentedString(individualReferenceNo)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


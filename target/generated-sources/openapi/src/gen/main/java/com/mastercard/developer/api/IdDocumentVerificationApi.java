/*
 * Mastercard Id Verification API
 * ID Verification provides the technology platform and operational service to perform real-time user identity verification for various use cases including financial services, healthcare, travel and education. The solution is offered via APIs to prove the identity of users based on their verified phone number and social security number.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.api;

import com.mastercard.developer.ApiCallback;
import com.mastercard.developer.ApiClient;
import com.mastercard.developer.ApiException;
import com.mastercard.developer.ApiResponse;
import com.mastercard.developer.Configuration;
import com.mastercard.developer.Pair;
import com.mastercard.developer.ProgressRequestBody;
import com.mastercard.developer.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.model.id.verification.ApiError;
import com.mastercard.developer.model.id.verification.DriversLicenseSourceVerificationRequestAttributes;
import com.mastercard.developer.model.id.verification.MedicareCardSourceVerificationRequestAttributes;
import com.mastercard.developer.model.id.verification.MedicareCardSourceVerificationResult;
import com.mastercard.developer.model.id.verification.PassportSourceVerificationRequestAttributes;
import com.mastercard.developer.model.id.verification.SourceVerificationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdDocumentVerificationApi {
    private ApiClient localVarApiClient;

    public IdDocumentVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdDocumentVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for verifyDriversLicense
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param driversLicenseSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDriversLicenseCall(String issuingCountry, DriversLicenseSourceVerificationRequestAttributes driversLicenseSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = driversLicenseSourceVerificationRequestAttributes;

        // create path and map variables
        String localVarPath = "/source-verifications/{issuing_country}/driving-licenses"
            .replaceAll("\\{" + "issuing_country" + "\\}", localVarApiClient.escapeString(issuingCountry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDriversLicenseValidateBeforeCall(String issuingCountry, DriversLicenseSourceVerificationRequestAttributes driversLicenseSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuingCountry' is set
        if (issuingCountry == null) {
            throw new ApiException("Missing the required parameter 'issuingCountry' when calling verifyDriversLicense(Async)");
        }
        
        // verify the required parameter 'driversLicenseSourceVerificationRequestAttributes' is set
        if (driversLicenseSourceVerificationRequestAttributes == null) {
            throw new ApiException("Missing the required parameter 'driversLicenseSourceVerificationRequestAttributes' when calling verifyDriversLicense(Async)");
        }
        

        okhttp3.Call localVarCall = verifyDriversLicenseCall(issuingCountry, driversLicenseSourceVerificationRequestAttributes, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * Verifies the details of a driving license document with an identity verification provider
     * Returns the Status of the Source Verification that has been processed by a trusted IVP.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param driversLicenseSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return SourceVerificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public SourceVerificationResult verifyDriversLicense(String issuingCountry, DriversLicenseSourceVerificationRequestAttributes driversLicenseSourceVerificationRequestAttributes, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<SourceVerificationResult> localVarResp = verifyDriversLicenseWithHttpInfo(issuingCountry, driversLicenseSourceVerificationRequestAttributes, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * Verifies the details of a driving license document with an identity verification provider
     * Returns the Status of the Source Verification that has been processed by a trusted IVP.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param driversLicenseSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;SourceVerificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceVerificationResult> verifyDriversLicenseWithHttpInfo(String issuingCountry, DriversLicenseSourceVerificationRequestAttributes driversLicenseSourceVerificationRequestAttributes, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = verifyDriversLicenseValidateBeforeCall(issuingCountry, driversLicenseSourceVerificationRequestAttributes, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<SourceVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies the details of a driving license document with an identity verification provider (asynchronously)
     * Returns the Status of the Source Verification that has been processed by a trusted IVP.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param driversLicenseSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDriversLicenseAsync(String issuingCountry, DriversLicenseSourceVerificationRequestAttributes driversLicenseSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback<SourceVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDriversLicenseValidateBeforeCall(issuingCountry, driversLicenseSourceVerificationRequestAttributes, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<SourceVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyMedicareCard
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param medicareCardSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyMedicareCardCall(String issuingCountry, MedicareCardSourceVerificationRequestAttributes medicareCardSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = medicareCardSourceVerificationRequestAttributes;

        // create path and map variables
        String localVarPath = "/source-verifications/{issuing_country}/medicare-cards"
            .replaceAll("\\{" + "issuing_country" + "\\}", localVarApiClient.escapeString(issuingCountry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyMedicareCardValidateBeforeCall(String issuingCountry, MedicareCardSourceVerificationRequestAttributes medicareCardSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuingCountry' is set
        if (issuingCountry == null) {
            throw new ApiException("Missing the required parameter 'issuingCountry' when calling verifyMedicareCard(Async)");
        }
        
        // verify the required parameter 'medicareCardSourceVerificationRequestAttributes' is set
        if (medicareCardSourceVerificationRequestAttributes == null) {
            throw new ApiException("Missing the required parameter 'medicareCardSourceVerificationRequestAttributes' when calling verifyMedicareCard(Async)");
        }
        

        okhttp3.Call localVarCall = verifyMedicareCardCall(issuingCountry, medicareCardSourceVerificationRequestAttributes, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * Verifies the details of a medicare card document with an identity verification provider
     * Returns the status of the Medicare Card source verification as it&#39;s being processed by the vendor. Biometrics are not used with this API, which means document scanning is not required for the users to verify their identity. This will be a one-time verification with no data being stored.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param medicareCardSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return MedicareCardSourceVerificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public MedicareCardSourceVerificationResult verifyMedicareCard(String issuingCountry, MedicareCardSourceVerificationRequestAttributes medicareCardSourceVerificationRequestAttributes, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<MedicareCardSourceVerificationResult> localVarResp = verifyMedicareCardWithHttpInfo(issuingCountry, medicareCardSourceVerificationRequestAttributes, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * Verifies the details of a medicare card document with an identity verification provider
     * Returns the status of the Medicare Card source verification as it&#39;s being processed by the vendor. Biometrics are not used with this API, which means document scanning is not required for the users to verify their identity. This will be a one-time verification with no data being stored.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param medicareCardSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;MedicareCardSourceVerificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MedicareCardSourceVerificationResult> verifyMedicareCardWithHttpInfo(String issuingCountry, MedicareCardSourceVerificationRequestAttributes medicareCardSourceVerificationRequestAttributes, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = verifyMedicareCardValidateBeforeCall(issuingCountry, medicareCardSourceVerificationRequestAttributes, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<MedicareCardSourceVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies the details of a medicare card document with an identity verification provider (asynchronously)
     * Returns the status of the Medicare Card source verification as it&#39;s being processed by the vendor. Biometrics are not used with this API, which means document scanning is not required for the users to verify their identity. This will be a one-time verification with no data being stored.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param medicareCardSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyMedicareCardAsync(String issuingCountry, MedicareCardSourceVerificationRequestAttributes medicareCardSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback<MedicareCardSourceVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyMedicareCardValidateBeforeCall(issuingCountry, medicareCardSourceVerificationRequestAttributes, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<MedicareCardSourceVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPassport
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param passportSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPassportCall(String issuingCountry, PassportSourceVerificationRequestAttributes passportSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = passportSourceVerificationRequestAttributes;

        // create path and map variables
        String localVarPath = "/source-verifications/{issuing_country}/passports"
            .replaceAll("\\{" + "issuing_country" + "\\}", localVarApiClient.escapeString(issuingCountry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xEncryptedPayload != null) {
            localVarHeaderParams.put("X-Encrypted-Payload", localVarApiClient.parameterToString(xEncryptedPayload));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPassportValidateBeforeCall(String issuingCountry, PassportSourceVerificationRequestAttributes passportSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuingCountry' is set
        if (issuingCountry == null) {
            throw new ApiException("Missing the required parameter 'issuingCountry' when calling verifyPassport(Async)");
        }
        
        // verify the required parameter 'passportSourceVerificationRequestAttributes' is set
        if (passportSourceVerificationRequestAttributes == null) {
            throw new ApiException("Missing the required parameter 'passportSourceVerificationRequestAttributes' when calling verifyPassport(Async)");
        }
        

        okhttp3.Call localVarCall = verifyPassportCall(issuingCountry, passportSourceVerificationRequestAttributes, xEncryptedPayload, _callback);
        return localVarCall;

    }

    /**
     * Verifies the details of a passport document with an identity verification provider
     * Returns the Status of the Source Verification that has been processed by a trusted IVP.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param passportSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return SourceVerificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public SourceVerificationResult verifyPassport(String issuingCountry, PassportSourceVerificationRequestAttributes passportSourceVerificationRequestAttributes, Boolean xEncryptedPayload) throws ApiException {
        ApiResponse<SourceVerificationResult> localVarResp = verifyPassportWithHttpInfo(issuingCountry, passportSourceVerificationRequestAttributes, xEncryptedPayload);
        return localVarResp.getData();
    }

    /**
     * Verifies the details of a passport document with an identity verification provider
     * Returns the Status of the Source Verification that has been processed by a trusted IVP.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param passportSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @return ApiResponse&lt;SourceVerificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceVerificationResult> verifyPassportWithHttpInfo(String issuingCountry, PassportSourceVerificationRequestAttributes passportSourceVerificationRequestAttributes, Boolean xEncryptedPayload) throws ApiException {
        okhttp3.Call localVarCall = verifyPassportValidateBeforeCall(issuingCountry, passportSourceVerificationRequestAttributes, xEncryptedPayload, null);
        Type localVarReturnType = new TypeToken<SourceVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies the details of a passport document with an identity verification provider (asynchronously)
     * Returns the Status of the Source Verification that has been processed by a trusted IVP.
     * @param issuingCountry Country of issue for the document in the ISO 3166-1 alpha-3 format (required)
     * @param passportSourceVerificationRequestAttributes  (required)
     * @param xEncryptedPayload Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * X-Transaction-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Consent not given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPassportAsync(String issuingCountry, PassportSourceVerificationRequestAttributes passportSourceVerificationRequestAttributes, Boolean xEncryptedPayload, final ApiCallback<SourceVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPassportValidateBeforeCall(issuingCountry, passportSourceVerificationRequestAttributes, xEncryptedPayload, _callback);
        Type localVarReturnType = new TypeToken<SourceVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
